name: Build and Release
on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Release tag name (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
        type: string
      release_name:
        description: 'Release name'
        required: true
        default: 'Manual Release'
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean
      draft:
        description: 'Create as draft'
        required: false
        default: false
        type: boolean

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.get_tag.outputs.tag_name }}
    steps:
      - name: Get tag name
        id: get_tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "tag_name=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_tag.outputs.tag_name }}
          release_name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.release_name || format('Release {0}', steps.get_tag.outputs.tag_name) }}
          draft: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.draft || 'false' }}
          prerelease: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.prerelease || 'false' }}

  build:
    needs: create-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          [
            linux/amd64,
            linux/arm64,
            darwin/amd64,
            darwin/arm64,
            windows/amd64,
            windows/arm64,
          ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.22
      
      - name: Get OS and ARCH
        id: platform
        run: |
          echo "GOOS=$(echo ${{ matrix.platform }} | cut -d '/' -f1)" >> $GITHUB_OUTPUT
          echo "GOARCH=$(echo ${{ matrix.platform }} | cut -d '/' -f2)" >> $GITHUB_OUTPUT
          FORMATTED_PLATFORM=$(echo "${{ matrix.platform }}" | sed 's/\//-/g')
          echo "FORMATTED_PLATFORM=$FORMATTED_PLATFORM" >> $GITHUB_OUTPUT
          if [[ "${{ matrix.platform }}" == *"windows"* ]]; then
            echo "EXT=.exe" >> $GITHUB_OUTPUT
          else
            echo "EXT=" >> $GITHUB_OUTPUT
          fi
      
      - name: Build
        env:
          GOOS: ${{ steps.platform.outputs.GOOS }}
          GOARCH: ${{ steps.platform.outputs.GOARCH }}
        run: |
          mkdir -p ./artifacts
          go build -ldflags="-s -w" -o "./artifacts/localsend-go-${{ steps.platform.outputs.FORMATTED_PLATFORM }}${{ steps.platform.outputs.EXT }}" .
      
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./artifacts/localsend-go-${{ steps.platform.outputs.FORMATTED_PLATFORM }}${{ steps.platform.outputs.EXT }}
          asset_name: localsend-go-${{ steps.platform.outputs.FORMATTED_PLATFORM }}${{ steps.platform.outputs.EXT }}
          asset_content_type: application/octet-stream
